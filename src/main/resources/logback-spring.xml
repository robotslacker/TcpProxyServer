<?xml version="1.0" encoding="UTF-8"?>
<!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。scan=true，此属性生效。默认的时间间隔为1分钟 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <include resource="org/springframework/boot/logging/logback/base.xml"/>
    <springProperty scope="context" name="LOG_PATH" source="logging.file.path"/>

    <!-- 追加器开始 -->

    <!-- 输出到控制台 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 过滤日志级别 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
        <encoder charset="UTF-8">
            <pattern>%d{yyyy-MM-dd HH:mm:ss,SSS} %t %-4r %p %F[%L]: %m%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- INFO 级别日志文件，按天滚动 -->
    <appender name="LOGBACK_INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 写入的文件名，可以是相对目录或者绝对目录；如果上级目录不存在自动创建，没有默认值 -->
        <file>${LOG_PATH}/log-info.log</file>
        <!-- 日志记录器滚动策略（按日期/文件大小） -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/log-info-%d{yyyy-MM-dd}.log
            </fileNamePattern>
            <!-- 保留最近15天 -->
            <maxHistory>15</maxHistory>
            <!-- 指定日志文件的上限大小,总量达到1GB删除旧日志 -->
            <totalSizeCap>1GB</totalSizeCap>
        </rollingPolicy>
        <!-- 临界值过滤器，过滤掉低于指定临界值的日志 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
        <!-- 默认true，日志被追加到文件结尾；如果是 false，清空现存文件 -->
        <append>true</append>
        <!-- 定义字符集和输出样式 -->
        <encoder charset="UTF-8">
            <pattern>%d{HH:mm:ss.SSS} %-5level - %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <appender name="SIFT" class="ch.qos.logback.classic.sift.SiftingAppender">
        <discriminator class="com.robotslacker.tcpproxy.util.MarkerNameBasedDiscriminator"/>
        <sift>
            <appender name="FILE-${markerName}" class="ch.qos.logback.core.rolling.RollingFileAppender">
                <file>${LOG_PATH}/${markerName}.log</file>
                <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                    <fileNamePattern>
                        ${LOG_PATH}/${markerName}.%d{yyyy-MM-dd}.log
                    </fileNamePattern>
                    <!-- 保留最近15天 -->
                    <maxHistory>15</maxHistory>
                    <!-- 指定日志文件的上限大小,总量达到1GB删除旧日志 -->
                    <totalSizeCap>1GB</totalSizeCap>
                </rollingPolicy>
                <!-- 临界值过滤器，过滤掉低于指定临界值的日志 -->
                <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                    <level>INFO</level>
                </filter>
                <!-- 默认true，日志被追加到文件结尾；如果是 false，清空现存文件 -->
                <append>true</append>
                <!-- 定义字符集和输出样式 -->
                <encoder charset="UTF-8">
                    <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level - %msg%n</pattern>
                    <charset>UTF-8</charset>
                </encoder>
            </appender>
        </sift>
    </appender>

    <appender name="SIFT-ERR" class="ch.qos.logback.classic.sift.SiftingAppender">
        <discriminator class="com.robotslacker.tcpproxy.util.MarkerNameBasedDiscriminator"/>
        <sift>
            <appender name="FILE-ERROR-${markerName}" class="ch.qos.logback.core.rolling.RollingFileAppender">
                <file>${LOG_PATH}/${markerName}.err.log</file>
                <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                    <fileNamePattern>
                        ${LOG_PATH}/${markerName}.%d{yyyy-MM-dd}.err.log
                    </fileNamePattern>
                    <!-- 保留最近15天 -->
                    <maxHistory>15</maxHistory>
                    <!-- 指定日志文件的上限大小,总量达到1GB删除旧日志 -->
                    <totalSizeCap>1GB</totalSizeCap>
                </rollingPolicy>
                <!-- 临界值过滤器，过滤掉低于指定临界值的日志 -->
                <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                    <level>ERROR</level>
                </filter>
                <!-- 默认true，日志被追加到文件结尾；如果是 false，清空现存文件 -->
                <append>true</append>
                <!-- 定义字符集和输出样式 -->
                <encoder charset="UTF-8">
                    <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level - %msg%n</pattern>
                    <charset>UTF-8</charset>
                </encoder>
            </appender>
        </sift>
    </appender>

    <!-- 异步输出 -->
    <appender name="SIFT-ASYNC" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>512</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="SIFT"/>
    </appender>

    <!-- 异步输出 -->
    <appender name="SIFT-ASYNC-ERR" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>512</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="SIFT-ERR"/>
    </appender>
    <!-- 追加器结束 -->

    <!-- 默认输出配置 -->
    <root level="INFO">
        <!--        <appender-ref ref="CONSOLE"/>-->
        <appender-ref ref="LOGBACK_INFO"/>
    </root>

    <!-- 业务输出日志 -->
    <logger name="TcpProxyServer" level="INFO" additvity="false">
        <appender-ref ref="SIFT-ASYNC"/>
        <appender-ref ref="SIFT-ASYNC-ERR"/>
    </logger>

    <logger level="OFF" name="org.springframework.boot.autoconfigure.logging"  additivity="false">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="LOGBACK_INFO" />
    </logger>

</configuration>